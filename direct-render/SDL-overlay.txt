WESTON

nodist_weston_desktop_shell_SOURCES =			\
	protocol/weston-desktop-shell-client-protocol.h	\
	protocol/weston-desktop-shell-protocol.c
weston_desktop_shell_LDADD = libtoytoolkit.la -lSDL2 -lSDL2_image
weston_desktop_shell_CFLAGS = $(AM_CFLAGS) $(CLIENT_CFLAGS) -I/usr/include/SDL2 -D_REENTRANT

==== https://caveofprogramming.com/guest-posts/animating-using-sprite-sheets.html

#include <pthread.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>

pthread_t p_anim_t;

void *
SDL_overlay (void * data) {

    SDL_Init(SDL_INIT_EVERYTHING);
    IMG_Init(IMG_INIT_PNG);
    SDL_Window* window = SDL_CreateWindow("Animating using Sprite Sheets", 0, 0, 1920, 1080, SDL_WINDOW_FULLSCREEN | SDL_WINDOW_BORDERLESS);
    SDL_Renderer* renderer = SDL_CreateRenderer(window, -1, 0);
    SDL_Event input;
    bool quit = false;

    SDL_Texture* spriteSheet = NULL;
    SDL_Surface* temp = IMG_Load("/tmp/capguy-walk.png");
    spriteSheet = SDL_CreateTextureFromSurface(renderer, temp);
    SDL_FreeSurface(temp);

    SDL_Rect windowRect;
    windowRect.x = 0;
    windowRect.y = 0;
    windowRect.w = 140;
    windowRect.h = 200;

    SDL_Rect textureRect;
    textureRect.x = 0;
    textureRect.y = 0;

    SDL_QueryTexture(spriteSheet, NULL, NULL, &textureRect.w, &textureRect.h);

    textureRect.w /= 8;

    while (!quit)
    {
        while (SDL_PollEvent(&input) > 0)
        {
            if (input.type == SDL_QUIT) quit = true;
        }

        int totalFrames = 8;

        int delayPerFrame = 100;

        int frame = (SDL_GetTicks() / delayPerFrame) % totalFrames;

        textureRect.x = frame * textureRect.w;

        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderClear(renderer);

        SDL_RenderCopy(renderer, spriteSheet, &textureRect, &windowRect);

        SDL_RenderPresent(renderer);
    }

    SDL_DestroyTexture(spriteSheet);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    IMG_Quit();
    SDL_Quit();
  

    return NULL;
}

static struct background *
background_create(struct desktop *desktop, struct output *output)
{

....

  free(type);

  if (pthread_create(&p_anim_t, NULL, SDL_overlay, NULL)) {
    fprintf(stderr, "Error creating thread\n");
  }

  return background;
}
